# Generated by Django 5.2.4 on 2025-08-10 16:27

import apps.core.models
import ckeditor.fields
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('cities', '0001_initial'),
        ('equipments', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Полное наименование')),
                ('short_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Сокращенное наименование')),
                ('inn', models.CharField(blank=True, max_length=12, null=True, verbose_name='ИНН')),
                ('kpp', models.CharField(blank=True, max_length=9, null=True, verbose_name='КПП')),
                ('okved', models.CharField(blank=True, max_length=100, null=True, verbose_name='ОКВЭД')),
                ('okpo', models.CharField(blank=True, max_length=10, null=True, verbose_name='ОКПО')),
                ('ogrn', models.CharField(blank=True, max_length=13, null=True, verbose_name='ОГРН')),
                ('ogrn_date', models.DateField(blank=True, null=True, verbose_name='Дата ОГРН')),
                ('okfs', models.CharField(blank=True, max_length=10, null=True, verbose_name='ОКФС')),
                ('okogu', models.CharField(blank=True, max_length=10, null=True, verbose_name='ОКОГУ')),
                ('okopf', models.CharField(blank=True, max_length=10, null=True, verbose_name='ОКОПФ')),
                ('oktmo', models.CharField(blank=True, max_length=10, null=True, verbose_name='ОКТМО')),
                ('legal_address', models.CharField(blank=True, max_length=255, null=True, verbose_name='Юридический адрес')),
                ('postal_address', models.CharField(blank=True, max_length=255, null=True, verbose_name='Фактический (почтовый) адрес')),
                ('phone_fax', models.CharField(blank=True, max_length=100, null=True, verbose_name='Телефон-факс')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='E-mail')),
                ('bank_account', models.CharField(blank=True, max_length=20, null=True, verbose_name='Расчетный счет')),
                ('bank_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Наименование банка')),
                ('correspondent_account', models.CharField(blank=True, max_length=20, null=True, verbose_name='Кор/счет')),
                ('bik', models.CharField(blank=True, max_length=9, null=True, verbose_name='БИК')),
                ('director_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Генеральный директор')),
                ('director_basis', models.CharField(blank=True, max_length=255, null=True, verbose_name='Действует на основании')),
            ],
            options={
                'verbose_name': 'Компания',
                'verbose_name_plural': 'Компании',
            },
        ),
        migrations.CreateModel(
            name='StaticPage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Заголовок')),
                ('slug', models.SlugField(unique=True, verbose_name='URL-адрес')),
                ('content', ckeditor.fields.RichTextField(verbose_name='Содержимое')),
            ],
            options={
                'verbose_name': 'Статическая страница',
                'verbose_name_plural': 'Статические страницы',
            },
        ),
        migrations.CreateModel(
            name='TVChannel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название канала')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('category', models.CharField(choices=[('broadcast', 'Эфирные'), ('education', 'Познавательные'), ('entertainment', 'Развлекательные'), ('kids', 'Детям'), ('movie', 'Кино'), ('music', 'Музыка'), ('news', 'Бизнес, новости'), ('sport', 'Спорт'), ('other', 'Другое')], default='other', max_length=20, verbose_name='Категория')),
                ('is_hd', models.BooleanField(default=False, verbose_name='HD качество')),
                ('logo', models.ImageField(blank=True, null=True, upload_to=apps.core.models.channel_logo_upload_to, verbose_name='Логотип канала')),
            ],
            options={
                'verbose_name': 'ТВ канал',
                'verbose_name_plural': 'ТВ каналы',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Имя')),
                ('phone', models.CharField(max_length=20, verbose_name='Телефон')),
                ('street', models.CharField(blank=True, max_length=200, verbose_name='Улица')),
                ('house_number', models.CharField(blank=True, max_length=50, verbose_name='Номер дома')),
                ('comment', models.TextField(blank=True, verbose_name='Комментарий')),
                ('status', models.CharField(choices=[('new', 'Новая'), ('in_progress', 'В обработке'), ('completed', 'Завершена')], default='new', max_length=20, verbose_name='Статус заявки')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('locality', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cities.locality', verbose_name='Населённый пункт')),
            ],
            options={
                'verbose_name': 'Заявка',
                'verbose_name_plural': 'Заявки',
            },
        ),
        migrations.CreateModel(
            name='Banner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255, null=True, verbose_name='Заголовок')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('background_image', models.ImageField(blank=True, null=True, upload_to='banners/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png'])], verbose_name='Изображение для десктопа')),
                ('background_image_alt', models.CharField(blank=True, max_length=255, null=True, verbose_name='Альтернативный текст для изображения')),
                ('mobile_image', models.ImageField(blank=True, null=True, upload_to='banners/mobile/', verbose_name='Изображение для мобильных')),
                ('button_text', models.CharField(blank=True, max_length=100, null=True, verbose_name='Текст кнопки')),
                ('link', models.URLField(blank=True, null=True, validators=[django.core.validators.URLValidator(message='Введите корректный URL')], verbose_name='Ссылка')),
                ('badge', models.CharField(blank=True, max_length=50, null=True, verbose_name='Бейдж')),
                ('badge_color', models.CharField(blank=True, choices=[('primary', 'Синий'), ('secondary', 'Серый'), ('success', 'Зелёный'), ('danger', 'Красный'), ('warning', 'Жёлтый'), ('info', 'Голубой'), ('dark', 'Чёрный')], default='primary', max_length=50, null=True, verbose_name='Цвет бейджa')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок показа')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлён')),
                ('localities', models.ManyToManyField(related_name='banners', to='cities.locality', verbose_name='Населённые пункты')),
            ],
            options={
                'verbose_name': 'Баннер',
                'verbose_name_plural': 'Баннеры',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Название документа')),
                ('file', models.FileField(upload_to='company_documents/', verbose_name='Файл')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='company_documents/thumbnails/', verbose_name='Превью документа')),
                ('uploaded_at', models.DateField(auto_now_add=True, verbose_name='Дата загрузки')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='core.company', verbose_name='Компания')),
            ],
            options={
                'verbose_name': 'Документ',
                'verbose_name_plural': 'Документы',
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('new', 'Новая'), ('in_progress', 'В обработке'), ('resolved', 'Решена')], default='new', max_length=20, verbose_name='Статус')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Имя')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Номер телефона')),
                ('content', models.TextField(blank=True, null=True, verbose_name='Сообщение')),
                ('time_create', models.DateTimeField(auto_now_add=True, verbose_name='Дата отправки')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP отправителя')),
            ],
            options={
                'verbose_name': 'Обратная связь',
                'verbose_name_plural': 'Обратная связь',
                'ordering': ['-time_create'],
                'indexes': [models.Index(fields=['time_create'], name='core_feedba_time_cr_5bc39e_idx'), models.Index(fields=['phone'], name='core_feedba_phone_54e3f4_idx')],
            },
        ),
        migrations.CreateModel(
            name='Office',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='office_images/', verbose_name='Изображение')),
                ('address', models.CharField(max_length=200, verbose_name='Адрес')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Основной телефон')),
                ('connection_phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Телефон для подключения')),
                ('tech_support_phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Телефон технической поддержки')),
                ('tech_support_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email технической поддержки')),
                ('latitude', models.CharField(blank=True, max_length=50, null=True, verbose_name='Широта')),
                ('longitude', models.CharField(blank=True, max_length=50, null=True, verbose_name='Долгота')),
                ('locality', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cities.locality', verbose_name='Населённый пункт')),
            ],
            options={
                'verbose_name': 'Офис',
                'verbose_name_plural': 'Офисы',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название услуги')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('background_image', models.ImageField(blank=True, null=True, upload_to='services/', verbose_name='Изображение')),
                ('slug', models.SlugField(unique=True, verbose_name='URL-адрес')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активна')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('localities', models.ManyToManyField(blank=True, related_name='services', to='cities.locality', verbose_name='Населённые пункты')),
            ],
            options={
                'verbose_name': 'Услуга',
                'verbose_name_plural': 'Услуги',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AdditionalService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название услуги')),
                ('price', models.PositiveIntegerField(verbose_name='Цена в месяц (₽)')),
                ('description', ckeditor.fields.RichTextField(blank=True, null=True, verbose_name='Описание')),
                ('slug', models.SlugField(blank=True, null=True, verbose_name='URL-адрес')),
                ('service_types', models.ManyToManyField(help_text='К каким базовым услугам относится эта доп. услуга', related_name='additional_services', to='core.service', verbose_name='Типы услуг')),
            ],
            options={
                'verbose_name': 'Дополнительная услуга',
                'verbose_name_plural': 'Дополнительные услуги',
            },
        ),
        migrations.CreateModel(
            name='Tariff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('technology', models.CharField(blank=True, choices=[('fttx', 'FTTx'), ('pon', 'PON')], max_length=20, null=True, verbose_name='Технология подключения')),
                ('speed', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Скорость (Мбит/с)')),
                ('price', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Цена (руб/мес)')),
                ('connection_price', models.PositiveIntegerField(default=200, verbose_name='Стоимость подключения (₽)')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Хит')),
                ('is_promo', models.BooleanField(default=False, verbose_name='Акция')),
                ('promo_price', models.PositiveIntegerField(blank=True, null=True, verbose_name='Промо-цена (₽)')),
                ('promo_months', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(24)], verbose_name='Месяцев по акции')),
                ('description', ckeditor.fields.RichTextField(blank=True, null=True, verbose_name='Описание')),
                ('slug', models.SlugField(blank=True, max_length=120, unique=True, verbose_name='URL-адрес')),
                ('priority', models.PositiveSmallIntegerField(default=0, help_text='Чем выше число, тем выше тариф в списке', verbose_name='Приоритет отображения')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('localities', models.ManyToManyField(blank=True, related_name='tariffs', to='cities.locality', verbose_name='Населённые пункты')),
                ('products', models.ManyToManyField(blank=True, related_name='tariffs', to='equipments.product', verbose_name='Оборудование для тарифа')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tariffs', to='core.service', verbose_name='Тип услуги')),
                ('included_channels', models.ManyToManyField(blank=True, related_name='tariffs', to='core.tvchannel', verbose_name='Включённые ТВ каналы')),
            ],
            options={
                'verbose_name': 'Тариф',
                'verbose_name_plural': 'Тарифы',
                'ordering': ['-priority', 'name', 'price'],
            },
        ),
        migrations.CreateModel(
            name='TVChannelPackage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название пакета')),
                ('description', ckeditor.fields.RichTextField(blank=True, null=True, verbose_name='Описание')),
                ('price', models.PositiveIntegerField(verbose_name='Цена в месяц (₽)')),
                ('image', models.ImageField(blank=True, null=True, upload_to=apps.core.models.tv_package_image_upload_to, verbose_name='Изображение')),
                ('slug', models.SlugField(blank=True, max_length=120, verbose_name='URL-адрес')),
                ('channels', models.ManyToManyField(to='core.tvchannel', verbose_name='Каналы')),
                ('tariffs', models.ManyToManyField(blank=True, related_name='tv_packages', to='core.tariff', verbose_name='Тарифы')),
            ],
            options={
                'verbose_name': 'Пакет ТВ-каналов',
                'verbose_name_plural': 'Пакеты ТВ-каналов',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='WorkSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('days', models.CharField(choices=[('Пн', 'Понедельник'), ('Вт', 'Вторник'), ('Ср', 'Среда'), ('Чт', 'Четверг'), ('Пт', 'Пятница'), ('Сб', 'Суббота'), ('Вс', 'Воскресенье'), ('Сб-Вс', 'Сб-Вс'), ('Пн-Чт', 'Пн-Чт'), ('Пн-Пт', 'Пн-Пт')], max_length=50)),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('is_closed', models.BooleanField(default=False)),
                ('office', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='core.office')),
            ],
            options={
                'verbose_name': 'Расписание работы',
                'verbose_name_plural': 'Расписания работы',
            },
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('equipment_type', models.CharField(choices=[('router', 'Роутер'), ('camera', 'Видеокамера'), ('tv_box', 'ТВ-приставка'), ('other', 'Другое')], max_length=20, verbose_name='Тип устройства')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('description', ckeditor.fields.RichTextField(blank=True, null=True, verbose_name='Описание')),
                ('price', models.IntegerField(verbose_name='Цена')),
                ('image', models.ImageField(blank=True, null=True, upload_to=apps.core.models.equipment_image_upload_to, verbose_name='Изображение')),
                ('service_types', models.ManyToManyField(blank=True, related_name='devices', to='core.service', verbose_name='Типы услуги')),
            ],
            options={
                'verbose_name': 'Оборудование',
                'verbose_name_plural': 'Оборудование',
                'ordering': ['name'],
                'unique_together': {('equipment_type', 'name')},
            },
        ),
    ]

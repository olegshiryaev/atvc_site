from django.db import models
from django.shortcuts import redirect, render, get_object_or_404
from django.urls import reverse
from collections import defaultdict
from django.views.generic import ListView, DetailView, TemplateView
from django.db.models import Q, Count
from django.db.models import F
from django.http import JsonResponse
from django.core.paginator import Paginator
from django.core.cache import cache
from django.views.decorators.cache import cache_page

from apps.cities.models import Locality
from apps.core.forms import FeedbackForm
from apps.core.models import Service
from .models import ArticleFeedback, ArticlePDF, HelpTopic, HelpArticle, FAQ
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from django.views.decorators.http import require_GET
from django.views.decorators.csrf import csrf_protect
from django.views.decorators.http import require_http_methods
from django.utils.html import strip_tags
from django.utils.text import Truncator
import json
import logging


logger = logging.getLogger(__name__)


class SupportBaseView:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö view –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–ª—è–µ—Ç locality"""
    
    def setup(self, request, *args, **kwargs):
        super().setup(request, *args, **kwargs)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º locality –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç –æ–±—ä–µ–∫—Ç–∞
        locality_slug = self.kwargs.get('locality_slug')
        if locality_slug:
            self.locality = get_object_or_404(Locality, slug=locality_slug, is_active=True)
        else:
            self.locality = None
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['locality'] = self.locality
        return context
    

def create_breadcrumbs(locality_slug, *items):
    """
    –°–æ–∑–¥–∞—ë—Ç —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏.
    –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç: (url_name, title, optional_kwargs)
    –ü—Ä–∏–º–µ—Ä: ('support:topic_detail', '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç', {'topic_slug': 'internet'})
    """
    breadcrumbs = []
    for item in items:
        if isinstance(item, tuple) and len(item) == 3:
            url_name, title, extra_kwargs = item
            kwargs = {'locality_slug': locality_slug, **extra_kwargs}
            try:
                url = reverse(url_name, kwargs=kwargs)
                breadcrumbs.append({'url': url, 'title': title})
            except Exception:
                breadcrumbs.append({'url': None, 'title': title})
        elif isinstance(item, tuple) and len(item) == 2:
            url_name, title = item
            if url_name:
                try:
                    url = reverse(url_name, kwargs={'locality_slug': locality_slug})
                    breadcrumbs.append({'url': url, 'title': title})
                except Exception:
                    breadcrumbs.append({'url': None, 'title': title})
            else:
                breadcrumbs.append({'url': None, 'title': title})
        else:
            breadcrumbs.append({'url': None, 'title': '–û—à–∏–±–∫–∞'})
    return breadcrumbs


class SupportHomeView(SupportBaseView, TemplateView):
    template_name = 'support/home.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)

        # –£—Å–ª—É–≥–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ —ç—Ç–æ–º –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ
        services = Service.objects.filter(
            is_active=True,
            localities=self.locality
        ).prefetch_related('help_topics').order_by('name')

        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å–ª—É–≥ –∏ —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏
        popular_articles = HelpArticle.objects.filter(
            status=HelpArticle.STATUS_PUBLISHED,
            topic__service__is_active=True,
            topic__service__localities=self.locality
        ).select_related('topic__service').order_by('-view_count')[:6]

        # –¢–µ–º—ã –ø–æ–º–æ—â–∏ ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å–ª—É–≥ –∏ —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏
        help_topics = HelpTopic.objects.filter(
            service__is_active=True,
            service__localities=self.locality
        ).distinct().order_by('title')

        # –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
        context['breadcrumbs'] = [
            {'url': 'core:home', 'title': '–ì–ª–∞–≤–Ω–∞—è'},
            {'url': None, 'title': '–°–ø—Ä–∞–≤–æ—á–Ω—ã–π –ø–æ—Ä—Ç–∞–ª'},
        ]

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        context['title'] = '–°–ø—Ä–∞–≤–æ—á–Ω—ã–π –ø–æ—Ä—Ç–∞–ª'

        # –î–∞–Ω–Ω—ã–µ
        context['services'] = services
        context['popular_articles'] = popular_articles
        context['help_topics'] = help_topics
        context['locality'] = self.locality

        # –§–æ—Ä–º–∞ (–µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Django-–≤–∞–ª–∏–¥–∞—Ü–∏—é)
        context['feedback_form'] = FeedbackForm()

        return context

    def post(self, request, *args, **kwargs):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        form = FeedbackForm(request.POST)
        if form.is_valid():
            feedback = form.save(commit=False)
            feedback.locality = self.locality
            feedback.source = 'support_home'  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à—ë–ª –∑–∞–ø—Ä–æ—Å
            feedback.save()

            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            from django.contrib import messages
            messages.success(request, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")

            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            return self.get(request, *args, **kwargs)
        else:
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ—Ä–º—É —Å –æ—à–∏–±–∫–∞–º–∏
            context = self.get_context_data()
            context['feedback_form'] = form
            return render(request, self.template_name, context)
    

class ServiceHelpView(SupportBaseView, TemplateView):
    template_name = 'support/service_help.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)

        service_slug = self.kwargs.get('service_slug')
        service = get_object_or_404(
            Service,
            slug=service_slug,
            is_active=True,
            localities=self.locality
        )

        # –¢–µ–º—ã —Å–ø—Ä–∞–≤–∫–∏ (–≤–∫–ª—é—á–∞—è –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Ç–æ–ø–∏–∫–∏ –±–µ–∑ —Å—Ç–∞—Ç–µ–π)
        topics = HelpTopic.objects.filter(
            service=service
        ).select_related('service').prefetch_related('articles').order_by('-order', 'title')

        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ FAQ
        featured_faqs = FAQ.objects.filter(
            service=service,
            is_featured=True
        ).order_by('order', 'question')[:6]

        # –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
        context['breadcrumbs'] = [
            {'url': 'core:home', 'title': '–ì–ª–∞–≤–Ω–∞—è'},
            {'url': 'support:home', 'title': '–°–ø—Ä–∞–≤–æ—á–Ω—ã–π –ø–æ—Ä—Ç–∞–ª'},
            {'url': None, 'title': service.name},
        ]

        context['title'] = service.name
        context['service'] = service
        context['topics'] = topics
        context['featured_faqs'] = featured_faqs

        return context


class TopicDetailView(SupportBaseView, ListView):
    template_name = 'support/topic_detail.html'
    context_object_name = 'articles'
    paginate_by = 12

    def dispatch(self, request, *args, **kwargs):
        self.service = get_object_or_404(
            Service,
            slug=self.kwargs['service_slug'],
            localities=self.locality,
            is_active=True
        )
        self.topic = get_object_or_404(
            HelpTopic,
            slug=self.kwargs['topic_slug'],
            service=self.service
        )

        # üü¢ –ï—Å–ª–∏ –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ç–æ–ø–∏–∫ ‚Äî –ø–æ–¥–º–µ–Ω—è–µ–º "article" –∏ —Ä–µ–Ω–¥–µ—Ä–∏–º article_detail.html
        if self.topic.is_single_topic:
            context = self.get_single_article_context()
            return render(request, "support/article_detail.html", context)

        return super().dispatch(request, *args, **kwargs)

    def get_queryset(self):
        return HelpArticle.objects.filter(
            topic=self.topic,
            status=HelpArticle.STATUS_PUBLISHED
        ).select_related("topic").order_by("-order", "-created_at")

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["breadcrumbs"] = [
            {"url": "core:home", "title": "–ì–ª–∞–≤–Ω–∞—è"},
            {"url": "support:home", "title": "–°–ø—Ä–∞–≤–æ—á–Ω—ã–π –ø–æ—Ä—Ç–∞–ª"},
            {
                "url": "support:service_help",
                "title": self.topic.service.name,
                "service_slug": self.topic.service.slug,
            },
            {"url": None, "title": self.topic.title},
        ]
        context["title"] = self.topic.title
        context["topic"] = self.topic
        context["service"] = self.service
        return context

    def get_single_article_context(self):
        """–§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ç–æ–ø–∏–∫–∞ (–∫–∞–∫ –±—É–¥—Ç–æ —ç—Ç–æ —Å—Ç–∞—Ç—å—è)"""
        self.topic.update_view_count()

        class FakeArticle:
            def __init__(self, topic):
                self.id = topic.id
                self.pk = topic.id
                self.title = topic.title
                self.content = topic.content
                self.view_count = topic.view_count
                self.created_at = topic.created_at
                self.updated_at = topic.updated_at
                self.slug = topic.slug
                self.topic = topic

        return {
            "breadcrumbs": [
                {"url": "core:home", "title": "–ì–ª–∞–≤–Ω–∞—è"},
                {"url": "support:home", "title": "–°–ø—Ä–∞–≤–æ—á–Ω—ã–π –ø–æ—Ä—Ç–∞–ª"},
                {
                    "url": "support:service_help",
                    "title": self.topic.service.name,
                    "service_slug": self.topic.service.slug,
                },
                {"url": None, "title": self.topic.title},
            ],
            "title": self.topic.title,
            "article": FakeArticle(self.topic),
            "related_articles": HelpArticle.objects.filter(
                topic__service=self.service,
                status=HelpArticle.STATUS_PUBLISHED
            ).exclude(topic=self.topic).select_related("topic")[:6],
            "service": self.service,
            "topic": self.topic,
            "locality": self.locality,
            "hide_feedback": True,
            "pdf_instructions": ArticlePDF.objects.filter(
                topic=self.topic
            ).order_by('-order', 'title'),
        }


class ArticleDetailView(SupportBaseView, DetailView):
    model = HelpArticle
    template_name = 'support/article_detail.html'
    context_object_name = 'article'
    slug_field = 'slug'
    slug_url_kwarg = 'article_slug'

    def get_queryset(self):
        return HelpArticle.objects.filter(
            status=HelpArticle.STATUS_PUBLISHED,
            topic__service__slug=self.kwargs['service_slug'],
            topic__service__localities=self.locality,
            topic__service__is_active=True,
            topic__slug=self.kwargs['topic_slug']
        ).select_related('topic__service')

    def get_object(self, queryset=None):
        obj = super().get_object(queryset)
        HelpArticle.objects.filter(pk=obj.pk).update(view_count=F('view_count') + 1)
        obj.refresh_from_db(fields=['view_count'])
        return obj

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        article = self.object

        breadcrumbs_cache_key = f'breadcrumbs_article_{article.id}'
        breadcrumbs = cache.get(breadcrumbs_cache_key)
        if breadcrumbs is None:
            breadcrumbs = [
                {'url': 'core:home', 'title': '–ì–ª–∞–≤–Ω–∞—è'},
                {'url': 'support:home', 'title': '–°–ø—Ä–∞–≤–æ—á–Ω—ã–π –ø–æ—Ä—Ç–∞–ª'},
                {
                    'url': 'support:service_help',
                    'title': article.topic.service.name,
                    'service_slug': article.topic.service.slug,
                },
                {
                    'url': 'support:topic_detail',
                    'title': article.topic.title,
                    'service_slug': article.topic.service.slug,
                    'topic_slug': article.topic.slug,
                },
                {
                    'url': None,
                    'title': article.title,
                },
            ]
            cache.set(breadcrumbs_cache_key, breadcrumbs, 60 * 15)

        context['title'] = article.title
        context['service'] = article.topic.service
        context['breadcrumbs'] = breadcrumbs

        context['pdf_instructions'] = ArticlePDF.objects.filter(
            article=article
        ).order_by('-order', 'title')

        return context

class SearchResultsView(SupportBaseView, ListView):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞.
    –ò—â–µ—Ç –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é —Å—Ç–∞—Ç–µ–π, –∞ —Ç–∞–∫–∂–µ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∏ –æ—Ç–≤–µ—Ç–∞–º FAQ.
    """
    template_name = 'support/search_results.html'
    context_object_name = 'results'
    paginate_by = 10

    def get_queryset(self):
        query = self.request.GET.get('q', '').strip()
        
        if not query:
            return HelpArticle.objects.none()

        # –ò—â–µ–º –≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—å—è—Ö
        article_results = HelpArticle.objects.filter(
            status=HelpArticle.STATUS_PUBLISHED
        ).filter(
            Q(title__icontains=query) | Q(content__icontains=query)
        ).select_related('topic').order_by('-view_count', '-created_at')

        # –ò—â–µ–º –≤ FAQ
        faq_results = FAQ.objects.filter(
            Q(question__icontains=query) | 
            Q(answer__icontains=query)
        ).select_related('topic').order_by('-is_featured', 'topic__title')

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å search engine (Elasticsearch, PostgreSQL Search)
        return list(article_results) + list(faq_results)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['query'] = self.request.GET.get('q', '')
        context['results_count'] = len(self.get_queryset())
        return context


class PopularArticlesView(SupportBaseView, ListView):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Å–∞–º—ã–º–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Å—Ç–∞—Ç—å—è–º–∏.
    """
    template_name = 'support/popular_articles.html'
    context_object_name = 'articles'
    paginate_by = 15

    def get_queryset(self):
        return HelpArticle.objects.filter(
            status=HelpArticle.STATUS_PUBLISHED
        ).select_related('topic').order_by('-view_count', '-created_at')


@method_decorator(csrf_exempt, name='dispatch')
def article_feedback(request, article_id):
    """
    AJAX view –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–¥–±–µ–∫–∞ –ø–æ —Å—Ç–∞—Ç—å–µ (–ø–æ–ª–µ–∑–Ω–æ/–Ω–µ –ø–æ–ª–µ–∑–Ω–æ).
    """
    if request.method == 'POST' and request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        article = get_object_or_404(HelpArticle, id=article_id)
        is_helpful = request.POST.get('is_helpful')
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ñ–∏–¥–±–µ–∫ –≤ –±–∞–∑—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        
        return JsonResponse({'status': 'success', 'message': '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!'})
    
    return JsonResponse({'status': 'error', 'message': '–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å'}, status=400)


def search_autocomplete(request, locality_slug):
    query = request.GET.get('q', '')
    if len(query) < 2:
        return JsonResponse({'results': []})
    
    # –ò—â–µ–º –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö —Å—Ç–∞—Ç–µ–π –∏ –≤–æ–ø—Ä–æ—Å–∞—Ö FAQ
    articles = HelpArticle.objects.filter(
        Q(title__icontains=query),
        status=HelpArticle.STATUS_PUBLISHED
    )[:5]
    
    faqs = FAQ.objects.filter(
        Q(question__icontains=query)
    )[:5]
    
    results = []
    for article in articles:
        results.append({
            'type': 'article',
            'title': article.title,
            'url': article.get_absolute_url(),
            'topic': article.topic.title
        })
    
    for faq in faqs:
        results.append({
            'type': 'faq',
            'title': faq.question,
            'url': f"{reverse('support:faq_list')}#faq-{faq.id}",
            'topic': faq.topic.title
        })
    
    return JsonResponse({'results': results})


class FAQListView(SupportBaseView, ListView):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.
    """
    model = FAQ
    template_name = 'support/faq_list.html'
    context_object_name = 'faqs'

    def get_queryset(self):
        return FAQ.objects.select_related('topic').order_by('topic__order', 'topic__title', 'question')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ FAQ –ø–æ —Ç–µ–º–∞–º
        faqs_by_topic = {}
        for faq in context['faqs']:
            if faq.topic not in faqs_by_topic:
                faqs_by_topic[faq.topic] = []
            faqs_by_topic[faq.topic].append(faq)
        context['faqs_by_topic'] = faqs_by_topic
        
        # –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏: –ì–ª–∞–≤–Ω–∞—è / –°–ø—Ä–∞–≤–æ—á–Ω—ã–π –ø–æ—Ä—Ç–∞–ª / –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        context['breadcrumbs'] = create_breadcrumbs(
            self.locality.slug,
            ('support:home', '–ì–ª–∞–≤–Ω–∞—è'),
            ('support:home', '–°–ø—Ä–∞–≤–æ—á–Ω—ã–π –ø–æ—Ä—Ç–∞–ª'),
            (None, '–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã')
        )
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        context['title'] = '–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã'
        
        return context
    


def service_faq_view(request, locality_slug, service_slug):
    service = get_object_or_404(Service, slug=service_slug, is_active=True, localities__slug=locality_slug)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ FAQ –¥–ª—è —ç—Ç–æ–π —É—Å–ª—É–≥–∏
    faqs = service.faqs.all()

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    faqs_by_category = defaultdict(list)
    category_display = dict(faqs.model.CATEGORY_CHOICES)

    for faq in faqs:
        key = faq.category
        display_name = category_display.get(key, "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã")
        faqs_by_category[display_name].append(faq)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    order_map = {
        '–î–æ—Å—Ç—É–ø –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç': 1,
        '–°–µ—Ç–µ–≤–æ–π —Ç—Ä–∞—Ñ–∏–∫': 2,
        '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞': 3,
        '–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã': 4,
    }

    sorted_categories = sorted(
        faqs_by_category.items(),
        key=lambda x: order_map.get(x[0], 99)
    )

    # --- –§–æ—Ä–º–∏—Ä—É–µ–º —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ ---
    breadcrumbs_cache_key = f'breadcrumbs_faq_{service.slug}_{locality_slug}'
    breadcrumbs = cache.get(breadcrumbs_cache_key)

    if breadcrumbs is None:
        breadcrumbs = [
            {'url': 'core:home', 'title': '–ì–ª–∞–≤–Ω–∞—è'},
            {'url': 'support:home', 'title': '–°–ø—Ä–∞–≤–æ—á–Ω—ã–π –ø–æ—Ä—Ç–∞–ª'},
            {
                'url': 'support:service_help',
                'title': service.name,
                'service_slug': service.slug,
            },
            {
                'url': None,
                'title': '–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã',
            },
        ]
        cache.set(breadcrumbs_cache_key, breadcrumbs, 60 * 15)

    context = {
        'service': service,
        'faqs_by_category': sorted_categories,
        'title': f"–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã",
        'locality_slug': locality_slug,
        'breadcrumbs': breadcrumbs,
    }
    return render(request, 'support/faq_service.html', context)


@require_GET
def search_suggestions(request, locality_slug):

    query = request.GET.get('q', '').strip()
    results = []

    if query:
        # –ü–æ–∏—Å–∫ –ø–æ —Å—Ç–∞—Ç—å—è–º
        articles = HelpArticle.objects.filter(
            status=HelpArticle.STATUS_PUBLISHED
        ).filter(
            models.Q(title__icontains=query) |
            models.Q(content__icontains=query)
        ).select_related('topic')[:5]

        # –ü–æ–∏—Å–∫ –ø–æ FAQ
        faqs = FAQ.objects.filter(
            models.Q(question__icontains=query) |
            models.Q(answer__icontains=query)
        )[:5]

        for article in articles:
            content_clean = strip_tags(article.content)
            results.append({
                'type': 'article',
                'title': article.title,
                'url': article.get_absolute_url(locality_slug),  # –ü–µ—Ä–µ–¥–∞—ë–º slug
                'desc': Truncator(content_clean).chars(120)
            })

        for faq in faqs:
            answer_clean = strip_tags(faq.answer)
            results.append({
                'type': 'faq',
                'title': faq.question,
                'url': reverse('support:service_faq', kwargs={
                    'locality_slug': locality_slug,
                    'service_slug': faq.service.slug
                }) + f'#faq-{faq.pk}',
                'desc': Truncator(answer_clean).chars(120)
            })

    return JsonResponse({'results': results})


def search_results_view(request, locality_slug):
    query = request.GET.get('q', '').strip()
    articles = []
    faqs = []

    if query:
        articles = HelpArticle.objects.filter(
            status=HelpArticle.STATUS_PUBLISHED
        ).filter(
            Q(title__icontains=query) |
            Q(content__icontains=query)
        ).select_related('topic', 'topic__service')[:10]

        faqs = FAQ.objects.filter(
            Q(question__icontains=query) |
            Q(answer__icontains=query)
        ).select_related('service')[:10]

    return render(request, 'support/search_results.html', {
        'query': query,
        'articles': articles,
        'faqs': faqs,
        'locality_slug': locality_slug,
        'title': f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: {query}'
    })


@require_http_methods(["POST"])
@csrf_protect
def submit_feedback(request, locality_slug, service_slug, topic_slug, article_slug):
    article = get_object_or_404(
        HelpArticle,
        slug=article_slug,
        topic__slug=topic_slug,
        topic__service__slug=service_slug,
        status=HelpArticle.STATUS_PUBLISHED
    )

    try:
        data = json.loads(request.body)
        helped = data.get('helped')
        session_id = data.get('session_id')

        if not session_id:
            return JsonResponse({
                'success': False,
                'error': '–ù–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–µ—Å—Å–∏–∏'
            }, status=400)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—å
        if ArticleFeedback.objects.filter(article=article, session_id=session_id).exists():
            return JsonResponse({
                'success': False,
                'error': '–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç—É —Å—Ç–∞—Ç—å—é'
            }, status=400)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–π –æ—Ç–∑—ã–≤
        ArticleFeedback.objects.create(
            article=article,
            helped=helped,
            session_id=session_id
        )

        return JsonResponse({
            'success': True,
            'message': '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!'
        })

    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏'
        }, status=500)